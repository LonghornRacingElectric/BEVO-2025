
#define lambdas outside to avoid recompliations
CAN_MAPPING = {
    0x102: ("dynamics.steer_col_angle", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x103: ("dynamics.fl_steer_angle", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x104: ("dynamics.fr_steer_angle", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x105: ("dynamics.fl_sprung_accel", lambda d: [0.0]),
    0x106: ("dynamics.fr_sprung_accel", lambda d: [0.0]),
    0x107: ("dynamics.bl_sprung_accel", lambda d: [0.0]),
    0x108: ("dynamics.br_sprung_accel", lambda d: [0.0]),
    0x109: ("dynamics.fl_unsprung_accel", lambda d: [0.0]),
    0x10A: ("dynamics.fr_unsprung_accel", lambda d: [0.0]),
    0x10B: ("dynamics.bl_unsprung_accel", lambda d: [0.0]),
    0x10C: ("dynamics.br_unsprung_accel", lambda d: [0.0]),
    0x10D: ("dynamics.fl_sprung_ang_rate", lambda d: [0.0]),
    0x10E: ("dynamics.fr_sprung_ang_rate", lambda d: [0.0]),
    0x10F: ("dynamics.bl_sprung_ang_rate", lambda d: [0.0]),
    0x110: ("dynamics.br_sprung_ang_rate", lambda d: [0.0]),
    0x111: ("dynamics.cent_mass_accel", lambda d: [0.0]),
    0x112: ("dynamics.cent_mass_ang_rate", lambda d: [0.0]),
    0x113: ("dynamics.flw_speed", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x114: ("dynamics.frw_speed", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x115: ("dynamics.blw_speed", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x116: ("dynamics.brw_speed", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x117: ("dynamics.fl_ride_height", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x118: ("dynamics.fr_ride_height", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x119: ("dynamics.bl_ride_height", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x11A: ("dynamics.br_ride_height", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x11B: ("dynamics.fl_strain_gauge_v", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x11C: ("dynamics.fr_strain_gauge_v", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x11D: ("dynamics.bl_strain_gauge_v", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x11E: ("dynamics.br_strain_gauge_v", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x11F: ("dynamics.fl_pushrod_stress", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x120: ("dynamics.fr_pushrod_stress", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x121: ("dynamics.bl_pushrod_stress", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x122: ("dynamics.br_pushrod_stress", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x123: ("dynamics.fl_spring_displace", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x124: ("dynamics.fr_spring_displace", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x125: ("dynamics.bl_spring_displace", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x126: ("dynamics.br_spring_displace", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x127: ("dynamics.dash_speed", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x128: ("dynamics.f_gps", lambda d: [0.0]),
    0x129: ("dynamics.b_gps", lambda d: [0.0]),
    0x12A: ("dynamics.f_gps_velocity", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x12B: ("dynamics.b_gps_velocity", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x12C: ("dynamics.f_gps_heading", lambda d: int.from_bytes(d, 'little') / 100.0),
    0x12D: ("dynamics.b_gps_heading", lambda d: int.from_bytes(d, 'little') / 100.0),
}
