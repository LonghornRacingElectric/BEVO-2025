// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: template.proto

package template

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Time            int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	PacketId        int64                  `protobuf:"varint,2,opt,name=packet_id,json=packetId,proto3" json:"packet_id,omitempty"`
	Dynamics        *Dynamics              `protobuf:"bytes,3,opt,name=dynamics,proto3" json:"dynamics,omitempty"`
	Controls        *Controls              `protobuf:"bytes,4,opt,name=controls,proto3" json:"controls,omitempty"`
	Pack            *Pack                  `protobuf:"bytes,5,opt,name=pack,proto3" json:"pack,omitempty"`
	DiagnosticsHigh *DiagnosticsHigh       `protobuf:"bytes,6,opt,name=diagnostics_high,json=diagnosticsHigh,proto3" json:"diagnostics_high,omitempty"`
	DiagnosticsLow  *DiagnosticsLow        `protobuf:"bytes,1001,opt,name=diagnostics_low,json=diagnosticsLow,proto3" json:"diagnostics_low,omitempty"`
	Thermal         *Thermal               `protobuf:"bytes,1002,opt,name=thermal,proto3" json:"thermal,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	mi := &file_template_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{0}
}

func (x *SensorData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SensorData) GetPacketId() int64 {
	if x != nil {
		return x.PacketId
	}
	return 0
}

func (x *SensorData) GetDynamics() *Dynamics {
	if x != nil {
		return x.Dynamics
	}
	return nil
}

func (x *SensorData) GetControls() *Controls {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *SensorData) GetPack() *Pack {
	if x != nil {
		return x.Pack
	}
	return nil
}

func (x *SensorData) GetDiagnosticsHigh() *DiagnosticsHigh {
	if x != nil {
		return x.DiagnosticsHigh
	}
	return nil
}

func (x *SensorData) GetDiagnosticsLow() *DiagnosticsLow {
	if x != nil {
		return x.DiagnosticsLow
	}
	return nil
}

func (x *SensorData) GetThermal() *Thermal {
	if x != nil {
		return x.Thermal
	}
	return nil
}

type Dynamics struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SteerColAngle    float32                `protobuf:"fixed32,7,opt,name=steer_col_angle,json=steerColAngle,proto3" json:"steer_col_angle,omitempty"`
	FlSteerAngle     float32                `protobuf:"fixed32,8,opt,name=fl_steer_angle,json=flSteerAngle,proto3" json:"fl_steer_angle,omitempty"`
	FrSteerAngle     float32                `protobuf:"fixed32,9,opt,name=fr_steer_angle,json=frSteerAngle,proto3" json:"fr_steer_angle,omitempty"`
	FlSprungAccel    []float32              `protobuf:"fixed32,10,rep,packed,name=fl_sprung_accel,json=flSprungAccel,proto3" json:"fl_sprung_accel,omitempty"`
	FrSprungAccel    []float32              `protobuf:"fixed32,11,rep,packed,name=fr_sprung_accel,json=frSprungAccel,proto3" json:"fr_sprung_accel,omitempty"`
	BlSprungAccel    []float32              `protobuf:"fixed32,12,rep,packed,name=bl_sprung_accel,json=blSprungAccel,proto3" json:"bl_sprung_accel,omitempty"`
	BrSprungAccel    []float32              `protobuf:"fixed32,13,rep,packed,name=br_sprung_accel,json=brSprungAccel,proto3" json:"br_sprung_accel,omitempty"`
	FlUnsprungAccel  []float32              `protobuf:"fixed32,14,rep,packed,name=fl_unsprung_accel,json=flUnsprungAccel,proto3" json:"fl_unsprung_accel,omitempty"`
	FrUnsprungAccel  []float32              `protobuf:"fixed32,15,rep,packed,name=fr_unsprung_accel,json=frUnsprungAccel,proto3" json:"fr_unsprung_accel,omitempty"`
	BlUnsprungAccel  []float32              `protobuf:"fixed32,16,rep,packed,name=bl_unsprung_accel,json=blUnsprungAccel,proto3" json:"bl_unsprung_accel,omitempty"`
	BrUnsprungAccel  []float32              `protobuf:"fixed32,17,rep,packed,name=br_unsprung_accel,json=brUnsprungAccel,proto3" json:"br_unsprung_accel,omitempty"`
	FlSprungAngRate  []float32              `protobuf:"fixed32,18,rep,packed,name=fl_sprung_ang_rate,json=flSprungAngRate,proto3" json:"fl_sprung_ang_rate,omitempty"`
	FrSprungAngRate  []float32              `protobuf:"fixed32,19,rep,packed,name=fr_sprung_ang_rate,json=frSprungAngRate,proto3" json:"fr_sprung_ang_rate,omitempty"`
	BlSprungAngRate  []float32              `protobuf:"fixed32,20,rep,packed,name=bl_sprung_ang_rate,json=blSprungAngRate,proto3" json:"bl_sprung_ang_rate,omitempty"`
	BrSprungAngRate  []float32              `protobuf:"fixed32,21,rep,packed,name=br_sprung_ang_rate,json=brSprungAngRate,proto3" json:"br_sprung_ang_rate,omitempty"`
	CentMassAccel    []float32              `protobuf:"fixed32,22,rep,packed,name=cent_mass_accel,json=centMassAccel,proto3" json:"cent_mass_accel,omitempty"`
	CentMassAngRate  []float32              `protobuf:"fixed32,23,rep,packed,name=cent_mass_ang_rate,json=centMassAngRate,proto3" json:"cent_mass_ang_rate,omitempty"`
	FlwSpeed         float32                `protobuf:"fixed32,24,opt,name=flw_speed,json=flwSpeed,proto3" json:"flw_speed,omitempty"`
	FrwSpeed         float32                `protobuf:"fixed32,25,opt,name=frw_speed,json=frwSpeed,proto3" json:"frw_speed,omitempty"`
	BlwSpeed         float32                `protobuf:"fixed32,26,opt,name=blw_speed,json=blwSpeed,proto3" json:"blw_speed,omitempty"`
	BrwSpeed         float32                `protobuf:"fixed32,27,opt,name=brw_speed,json=brwSpeed,proto3" json:"brw_speed,omitempty"`
	FlRideHeight     float32                `protobuf:"fixed32,28,opt,name=fl_ride_height,json=flRideHeight,proto3" json:"fl_ride_height,omitempty"`
	FrRideHeight     float32                `protobuf:"fixed32,29,opt,name=fr_ride_height,json=frRideHeight,proto3" json:"fr_ride_height,omitempty"`
	BlRideHeight     float32                `protobuf:"fixed32,30,opt,name=bl_ride_height,json=blRideHeight,proto3" json:"bl_ride_height,omitempty"`
	BrRideHeight     float32                `protobuf:"fixed32,31,opt,name=br_ride_height,json=brRideHeight,proto3" json:"br_ride_height,omitempty"`
	FlStrainGaugeV   float32                `protobuf:"fixed32,32,opt,name=fl_strain_gauge_v,json=flStrainGaugeV,proto3" json:"fl_strain_gauge_v,omitempty"`
	FrStrainGaugeV   float32                `protobuf:"fixed32,33,opt,name=fr_strain_gauge_v,json=frStrainGaugeV,proto3" json:"fr_strain_gauge_v,omitempty"`
	BlStrainGaugeV   float32                `protobuf:"fixed32,34,opt,name=bl_strain_gauge_v,json=blStrainGaugeV,proto3" json:"bl_strain_gauge_v,omitempty"`
	BrStrainGaugeV   float32                `protobuf:"fixed32,35,opt,name=br_strain_gauge_v,json=brStrainGaugeV,proto3" json:"br_strain_gauge_v,omitempty"`
	FlPushrodStress  float32                `protobuf:"fixed32,36,opt,name=fl_pushrod_stress,json=flPushrodStress,proto3" json:"fl_pushrod_stress,omitempty"`
	FrPushrodStress  float32                `protobuf:"fixed32,37,opt,name=fr_pushrod_stress,json=frPushrodStress,proto3" json:"fr_pushrod_stress,omitempty"`
	BlPushrodStress  float32                `protobuf:"fixed32,38,opt,name=bl_pushrod_stress,json=blPushrodStress,proto3" json:"bl_pushrod_stress,omitempty"`
	BrPushrodStress  float32                `protobuf:"fixed32,39,opt,name=br_pushrod_stress,json=brPushrodStress,proto3" json:"br_pushrod_stress,omitempty"`
	FlSpringDisplace float32                `protobuf:"fixed32,40,opt,name=fl_spring_displace,json=flSpringDisplace,proto3" json:"fl_spring_displace,omitempty"`
	FrSpringDisplace float32                `protobuf:"fixed32,41,opt,name=fr_spring_displace,json=frSpringDisplace,proto3" json:"fr_spring_displace,omitempty"`
	BlSpringDisplace float32                `protobuf:"fixed32,42,opt,name=bl_spring_displace,json=blSpringDisplace,proto3" json:"bl_spring_displace,omitempty"`
	BrSpringDisplace float32                `protobuf:"fixed32,43,opt,name=br_spring_displace,json=brSpringDisplace,proto3" json:"br_spring_displace,omitempty"`
	DashSpeed        float32                `protobuf:"fixed32,44,opt,name=dash_speed,json=dashSpeed,proto3" json:"dash_speed,omitempty"`
	FGps             []float32              `protobuf:"fixed32,45,rep,packed,name=f_gps,json=fGps,proto3" json:"f_gps,omitempty"`
	BGps             []float32              `protobuf:"fixed32,46,rep,packed,name=b_gps,json=bGps,proto3" json:"b_gps,omitempty"`
	FGpsVelocity     float32                `protobuf:"fixed32,47,opt,name=f_gps_velocity,json=fGpsVelocity,proto3" json:"f_gps_velocity,omitempty"`
	BGpsVelocity     float32                `protobuf:"fixed32,48,opt,name=b_gps_velocity,json=bGpsVelocity,proto3" json:"b_gps_velocity,omitempty"`
	FGpsHeading      float32                `protobuf:"fixed32,49,opt,name=f_gps_heading,json=fGpsHeading,proto3" json:"f_gps_heading,omitempty"`
	BGpsHeading      float32                `protobuf:"fixed32,50,opt,name=b_gps_heading,json=bGpsHeading,proto3" json:"b_gps_heading,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Dynamics) Reset() {
	*x = Dynamics{}
	mi := &file_template_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dynamics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dynamics) ProtoMessage() {}

func (x *Dynamics) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dynamics.ProtoReflect.Descriptor instead.
func (*Dynamics) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{1}
}

func (x *Dynamics) GetSteerColAngle() float32 {
	if x != nil {
		return x.SteerColAngle
	}
	return 0
}

func (x *Dynamics) GetFlSteerAngle() float32 {
	if x != nil {
		return x.FlSteerAngle
	}
	return 0
}

func (x *Dynamics) GetFrSteerAngle() float32 {
	if x != nil {
		return x.FrSteerAngle
	}
	return 0
}

func (x *Dynamics) GetFlSprungAccel() []float32 {
	if x != nil {
		return x.FlSprungAccel
	}
	return nil
}

func (x *Dynamics) GetFrSprungAccel() []float32 {
	if x != nil {
		return x.FrSprungAccel
	}
	return nil
}

func (x *Dynamics) GetBlSprungAccel() []float32 {
	if x != nil {
		return x.BlSprungAccel
	}
	return nil
}

func (x *Dynamics) GetBrSprungAccel() []float32 {
	if x != nil {
		return x.BrSprungAccel
	}
	return nil
}

func (x *Dynamics) GetFlUnsprungAccel() []float32 {
	if x != nil {
		return x.FlUnsprungAccel
	}
	return nil
}

func (x *Dynamics) GetFrUnsprungAccel() []float32 {
	if x != nil {
		return x.FrUnsprungAccel
	}
	return nil
}

func (x *Dynamics) GetBlUnsprungAccel() []float32 {
	if x != nil {
		return x.BlUnsprungAccel
	}
	return nil
}

func (x *Dynamics) GetBrUnsprungAccel() []float32 {
	if x != nil {
		return x.BrUnsprungAccel
	}
	return nil
}

func (x *Dynamics) GetFlSprungAngRate() []float32 {
	if x != nil {
		return x.FlSprungAngRate
	}
	return nil
}

func (x *Dynamics) GetFrSprungAngRate() []float32 {
	if x != nil {
		return x.FrSprungAngRate
	}
	return nil
}

func (x *Dynamics) GetBlSprungAngRate() []float32 {
	if x != nil {
		return x.BlSprungAngRate
	}
	return nil
}

func (x *Dynamics) GetBrSprungAngRate() []float32 {
	if x != nil {
		return x.BrSprungAngRate
	}
	return nil
}

func (x *Dynamics) GetCentMassAccel() []float32 {
	if x != nil {
		return x.CentMassAccel
	}
	return nil
}

func (x *Dynamics) GetCentMassAngRate() []float32 {
	if x != nil {
		return x.CentMassAngRate
	}
	return nil
}

func (x *Dynamics) GetFlwSpeed() float32 {
	if x != nil {
		return x.FlwSpeed
	}
	return 0
}

func (x *Dynamics) GetFrwSpeed() float32 {
	if x != nil {
		return x.FrwSpeed
	}
	return 0
}

func (x *Dynamics) GetBlwSpeed() float32 {
	if x != nil {
		return x.BlwSpeed
	}
	return 0
}

func (x *Dynamics) GetBrwSpeed() float32 {
	if x != nil {
		return x.BrwSpeed
	}
	return 0
}

func (x *Dynamics) GetFlRideHeight() float32 {
	if x != nil {
		return x.FlRideHeight
	}
	return 0
}

func (x *Dynamics) GetFrRideHeight() float32 {
	if x != nil {
		return x.FrRideHeight
	}
	return 0
}

func (x *Dynamics) GetBlRideHeight() float32 {
	if x != nil {
		return x.BlRideHeight
	}
	return 0
}

func (x *Dynamics) GetBrRideHeight() float32 {
	if x != nil {
		return x.BrRideHeight
	}
	return 0
}

func (x *Dynamics) GetFlStrainGaugeV() float32 {
	if x != nil {
		return x.FlStrainGaugeV
	}
	return 0
}

func (x *Dynamics) GetFrStrainGaugeV() float32 {
	if x != nil {
		return x.FrStrainGaugeV
	}
	return 0
}

func (x *Dynamics) GetBlStrainGaugeV() float32 {
	if x != nil {
		return x.BlStrainGaugeV
	}
	return 0
}

func (x *Dynamics) GetBrStrainGaugeV() float32 {
	if x != nil {
		return x.BrStrainGaugeV
	}
	return 0
}

func (x *Dynamics) GetFlPushrodStress() float32 {
	if x != nil {
		return x.FlPushrodStress
	}
	return 0
}

func (x *Dynamics) GetFrPushrodStress() float32 {
	if x != nil {
		return x.FrPushrodStress
	}
	return 0
}

func (x *Dynamics) GetBlPushrodStress() float32 {
	if x != nil {
		return x.BlPushrodStress
	}
	return 0
}

func (x *Dynamics) GetBrPushrodStress() float32 {
	if x != nil {
		return x.BrPushrodStress
	}
	return 0
}

func (x *Dynamics) GetFlSpringDisplace() float32 {
	if x != nil {
		return x.FlSpringDisplace
	}
	return 0
}

func (x *Dynamics) GetFrSpringDisplace() float32 {
	if x != nil {
		return x.FrSpringDisplace
	}
	return 0
}

func (x *Dynamics) GetBlSpringDisplace() float32 {
	if x != nil {
		return x.BlSpringDisplace
	}
	return 0
}

func (x *Dynamics) GetBrSpringDisplace() float32 {
	if x != nil {
		return x.BrSpringDisplace
	}
	return 0
}

func (x *Dynamics) GetDashSpeed() float32 {
	if x != nil {
		return x.DashSpeed
	}
	return 0
}

func (x *Dynamics) GetFGps() []float32 {
	if x != nil {
		return x.FGps
	}
	return nil
}

func (x *Dynamics) GetBGps() []float32 {
	if x != nil {
		return x.BGps
	}
	return nil
}

func (x *Dynamics) GetFGpsVelocity() float32 {
	if x != nil {
		return x.FGpsVelocity
	}
	return 0
}

func (x *Dynamics) GetBGpsVelocity() float32 {
	if x != nil {
		return x.BGpsVelocity
	}
	return 0
}

func (x *Dynamics) GetFGpsHeading() float32 {
	if x != nil {
		return x.FGpsHeading
	}
	return 0
}

func (x *Dynamics) GetBGpsHeading() float32 {
	if x != nil {
		return x.BGpsHeading
	}
	return 0
}

type Controls struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Apps1V            float32                `protobuf:"fixed32,51,opt,name=apps1_v,json=apps1V,proto3" json:"apps1_v,omitempty"`
	Apps2V            float32                `protobuf:"fixed32,52,opt,name=apps2_v,json=apps2V,proto3" json:"apps2_v,omitempty"`
	Apps1T            float32                `protobuf:"fixed32,53,opt,name=apps1_t,json=apps1T,proto3" json:"apps1_t,omitempty"`
	Apps2T            float32                `protobuf:"fixed32,54,opt,name=apps2_t,json=apps2T,proto3" json:"apps2_t,omitempty"`
	AccelPedalT       float32                `protobuf:"fixed32,55,opt,name=accel_pedal_t,json=accelPedalT,proto3" json:"accel_pedal_t,omitempty"`
	Bpps1V            float32                `protobuf:"fixed32,56,opt,name=bpps1_v,json=bpps1V,proto3" json:"bpps1_v,omitempty"`
	Bpps2V            float32                `protobuf:"fixed32,57,opt,name=bpps2_v,json=bpps2V,proto3" json:"bpps2_v,omitempty"`
	Bpps1T            float32                `protobuf:"fixed32,58,opt,name=bpps1_t,json=bpps1T,proto3" json:"bpps1_t,omitempty"`
	Bpps2T            float32                `protobuf:"fixed32,59,opt,name=bpps2_t,json=bpps2T,proto3" json:"bpps2_t,omitempty"`
	BrakePedalT       float32                `protobuf:"fixed32,60,opt,name=brake_pedal_t,json=brakePedalT,proto3" json:"brake_pedal_t,omitempty"`
	Bse1V             float32                `protobuf:"fixed32,61,opt,name=bse1_v,json=bse1V,proto3" json:"bse1_v,omitempty"`
	Bse2V             float32                `protobuf:"fixed32,62,opt,name=bse2_v,json=bse2V,proto3" json:"bse2_v,omitempty"`
	Bse3V             float32                `protobuf:"fixed32,63,opt,name=bse3_v,json=bse3V,proto3" json:"bse3_v,omitempty"`
	BrakePressureF    float32                `protobuf:"fixed32,64,opt,name=brake_pressure_f,json=brakePressureF,proto3" json:"brake_pressure_f,omitempty"`
	BrakePressureRbll float32                `protobuf:"fixed32,65,opt,name=brake_pressure_rbll,json=brakePressureRbll,proto3" json:"brake_pressure_rbll,omitempty"`
	BrakePressureRall float32                `protobuf:"fixed32,66,opt,name=brake_pressure_rall,json=brakePressureRall,proto3" json:"brake_pressure_rall,omitempty"`
	BrakeBias         float32                `protobuf:"fixed32,67,opt,name=brake_bias,json=brakeBias,proto3" json:"brake_bias,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Controls) Reset() {
	*x = Controls{}
	mi := &file_template_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Controls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controls) ProtoMessage() {}

func (x *Controls) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controls.ProtoReflect.Descriptor instead.
func (*Controls) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{2}
}

func (x *Controls) GetApps1V() float32 {
	if x != nil {
		return x.Apps1V
	}
	return 0
}

func (x *Controls) GetApps2V() float32 {
	if x != nil {
		return x.Apps2V
	}
	return 0
}

func (x *Controls) GetApps1T() float32 {
	if x != nil {
		return x.Apps1T
	}
	return 0
}

func (x *Controls) GetApps2T() float32 {
	if x != nil {
		return x.Apps2T
	}
	return 0
}

func (x *Controls) GetAccelPedalT() float32 {
	if x != nil {
		return x.AccelPedalT
	}
	return 0
}

func (x *Controls) GetBpps1V() float32 {
	if x != nil {
		return x.Bpps1V
	}
	return 0
}

func (x *Controls) GetBpps2V() float32 {
	if x != nil {
		return x.Bpps2V
	}
	return 0
}

func (x *Controls) GetBpps1T() float32 {
	if x != nil {
		return x.Bpps1T
	}
	return 0
}

func (x *Controls) GetBpps2T() float32 {
	if x != nil {
		return x.Bpps2T
	}
	return 0
}

func (x *Controls) GetBrakePedalT() float32 {
	if x != nil {
		return x.BrakePedalT
	}
	return 0
}

func (x *Controls) GetBse1V() float32 {
	if x != nil {
		return x.Bse1V
	}
	return 0
}

func (x *Controls) GetBse2V() float32 {
	if x != nil {
		return x.Bse2V
	}
	return 0
}

func (x *Controls) GetBse3V() float32 {
	if x != nil {
		return x.Bse3V
	}
	return 0
}

func (x *Controls) GetBrakePressureF() float32 {
	if x != nil {
		return x.BrakePressureF
	}
	return 0
}

func (x *Controls) GetBrakePressureRbll() float32 {
	if x != nil {
		return x.BrakePressureRbll
	}
	return 0
}

func (x *Controls) GetBrakePressureRall() float32 {
	if x != nil {
		return x.BrakePressureRall
	}
	return 0
}

func (x *Controls) GetBrakeBias() float32 {
	if x != nil {
		return x.BrakeBias
	}
	return 0
}

type Pack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	HvPackV        float32                `protobuf:"fixed32,68,opt,name=hv_pack_v,json=hvPackV,proto3" json:"hv_pack_v,omitempty"`
	HvTractiveV    float32                `protobuf:"fixed32,69,opt,name=hv_tractive_v,json=hvTractiveV,proto3" json:"hv_tractive_v,omitempty"`
	HvC            float32                `protobuf:"fixed32,70,opt,name=hv_c,json=hvC,proto3" json:"hv_c,omitempty"`
	LvV            float32                `protobuf:"fixed32,71,opt,name=lv_v,json=lvV,proto3" json:"lv_v,omitempty"`
	LvC            float32                `protobuf:"fixed32,72,opt,name=lv_c,json=lvC,proto3" json:"lv_c,omitempty"`
	ContactorState int32                  `protobuf:"varint,73,opt,name=contactor_state,json=contactorState,proto3" json:"contactor_state,omitempty"`
	AvgCellV       float32                `protobuf:"fixed32,74,opt,name=avg_cell_v,json=avgCellV,proto3" json:"avg_cell_v,omitempty"`
	AvgCellTemp    float32                `protobuf:"fixed32,75,opt,name=avg_cell_temp,json=avgCellTemp,proto3" json:"avg_cell_temp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Pack) Reset() {
	*x = Pack{}
	mi := &file_template_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pack) ProtoMessage() {}

func (x *Pack) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pack.ProtoReflect.Descriptor instead.
func (*Pack) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{3}
}

func (x *Pack) GetHvPackV() float32 {
	if x != nil {
		return x.HvPackV
	}
	return 0
}

func (x *Pack) GetHvTractiveV() float32 {
	if x != nil {
		return x.HvTractiveV
	}
	return 0
}

func (x *Pack) GetHvC() float32 {
	if x != nil {
		return x.HvC
	}
	return 0
}

func (x *Pack) GetLvV() float32 {
	if x != nil {
		return x.LvV
	}
	return 0
}

func (x *Pack) GetLvC() float32 {
	if x != nil {
		return x.LvC
	}
	return 0
}

func (x *Pack) GetContactorState() int32 {
	if x != nil {
		return x.ContactorState
	}
	return 0
}

func (x *Pack) GetAvgCellV() float32 {
	if x != nil {
		return x.AvgCellV
	}
	return 0
}

func (x *Pack) GetAvgCellTemp() float32 {
	if x != nil {
		return x.AvgCellTemp
	}
	return 0
}

type DiagnosticsHigh struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Apps1Disconnect bool                   `protobuf:"varint,76,opt,name=apps1_disconnect,json=apps1Disconnect,proto3" json:"apps1_disconnect,omitempty"`
	Apps2Disconnect bool                   `protobuf:"varint,77,opt,name=apps2_disconnect,json=apps2Disconnect,proto3" json:"apps2_disconnect,omitempty"`
	Apps1OutRange   bool                   `protobuf:"varint,78,opt,name=apps1_out_range,json=apps1OutRange,proto3" json:"apps1_out_range,omitempty"`
	Apps2OutRange   bool                   `protobuf:"varint,79,opt,name=apps2_out_range,json=apps2OutRange,proto3" json:"apps2_out_range,omitempty"`
	AppsMismatch    bool                   `protobuf:"varint,80,opt,name=apps_mismatch,json=appsMismatch,proto3" json:"apps_mismatch,omitempty"`
	AppsImplause    bool                   `protobuf:"varint,81,opt,name=apps_implause,json=appsImplause,proto3" json:"apps_implause,omitempty"`
	Bpps1Disconnect bool                   `protobuf:"varint,82,opt,name=bpps1_disconnect,json=bpps1Disconnect,proto3" json:"bpps1_disconnect,omitempty"`
	Bpps2Disconnect bool                   `protobuf:"varint,83,opt,name=bpps2_disconnect,json=bpps2Disconnect,proto3" json:"bpps2_disconnect,omitempty"`
	Bpps1OutRange   bool                   `protobuf:"varint,84,opt,name=bpps1_out_range,json=bpps1OutRange,proto3" json:"bpps1_out_range,omitempty"`
	Bpps2OutRange   bool                   `protobuf:"varint,85,opt,name=bpps2_out_range,json=bpps2OutRange,proto3" json:"bpps2_out_range,omitempty"`
	BppsMismatch    bool                   `protobuf:"varint,86,opt,name=bpps_mismatch,json=bppsMismatch,proto3" json:"bpps_mismatch,omitempty"`
	Bse1Disconnect  bool                   `protobuf:"varint,87,opt,name=bse1_disconnect,json=bse1Disconnect,proto3" json:"bse1_disconnect,omitempty"`
	Bse2Disconnect  bool                   `protobuf:"varint,88,opt,name=bse2_disconnect,json=bse2Disconnect,proto3" json:"bse2_disconnect,omitempty"`
	Bse1OutRange    bool                   `protobuf:"varint,89,opt,name=bse1_out_range,json=bse1OutRange,proto3" json:"bse1_out_range,omitempty"`
	Bse2OutRange    bool                   `protobuf:"varint,90,opt,name=bse2_out_range,json=bse2OutRange,proto3" json:"bse2_out_range,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DiagnosticsHigh) Reset() {
	*x = DiagnosticsHigh{}
	mi := &file_template_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiagnosticsHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsHigh) ProtoMessage() {}

func (x *DiagnosticsHigh) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsHigh.ProtoReflect.Descriptor instead.
func (*DiagnosticsHigh) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{4}
}

func (x *DiagnosticsHigh) GetApps1Disconnect() bool {
	if x != nil {
		return x.Apps1Disconnect
	}
	return false
}

func (x *DiagnosticsHigh) GetApps2Disconnect() bool {
	if x != nil {
		return x.Apps2Disconnect
	}
	return false
}

func (x *DiagnosticsHigh) GetApps1OutRange() bool {
	if x != nil {
		return x.Apps1OutRange
	}
	return false
}

func (x *DiagnosticsHigh) GetApps2OutRange() bool {
	if x != nil {
		return x.Apps2OutRange
	}
	return false
}

func (x *DiagnosticsHigh) GetAppsMismatch() bool {
	if x != nil {
		return x.AppsMismatch
	}
	return false
}

func (x *DiagnosticsHigh) GetAppsImplause() bool {
	if x != nil {
		return x.AppsImplause
	}
	return false
}

func (x *DiagnosticsHigh) GetBpps1Disconnect() bool {
	if x != nil {
		return x.Bpps1Disconnect
	}
	return false
}

func (x *DiagnosticsHigh) GetBpps2Disconnect() bool {
	if x != nil {
		return x.Bpps2Disconnect
	}
	return false
}

func (x *DiagnosticsHigh) GetBpps1OutRange() bool {
	if x != nil {
		return x.Bpps1OutRange
	}
	return false
}

func (x *DiagnosticsHigh) GetBpps2OutRange() bool {
	if x != nil {
		return x.Bpps2OutRange
	}
	return false
}

func (x *DiagnosticsHigh) GetBppsMismatch() bool {
	if x != nil {
		return x.BppsMismatch
	}
	return false
}

func (x *DiagnosticsHigh) GetBse1Disconnect() bool {
	if x != nil {
		return x.Bse1Disconnect
	}
	return false
}

func (x *DiagnosticsHigh) GetBse2Disconnect() bool {
	if x != nil {
		return x.Bse2Disconnect
	}
	return false
}

func (x *DiagnosticsHigh) GetBse1OutRange() bool {
	if x != nil {
		return x.Bse1OutRange
	}
	return false
}

func (x *DiagnosticsHigh) GetBse2OutRange() bool {
	if x != nil {
		return x.Bse2OutRange
	}
	return false
}

type DiagnosticsLow struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	BattOverC              bool                   `protobuf:"varint,1003,opt,name=batt_over_c,json=battOverC,proto3" json:"batt_over_c,omitempty"`
	CellOverV              int32                  `protobuf:"varint,1004,opt,name=cell_over_v,json=cellOverV,proto3" json:"cell_over_v,omitempty"`
	CellUnderV             int32                  `protobuf:"varint,1005,opt,name=cell_under_v,json=cellUnderV,proto3" json:"cell_under_v,omitempty"`
	CellOpenWire           int32                  `protobuf:"varint,1006,opt,name=cell_open_wire,json=cellOpenWire,proto3" json:"cell_open_wire,omitempty"`
	CellDamaged            int32                  `protobuf:"varint,1007,opt,name=cell_damaged,json=cellDamaged,proto3" json:"cell_damaged,omitempty"`
	ThermistorDamaged      int32                  `protobuf:"varint,1008,opt,name=thermistor_damaged,json=thermistorDamaged,proto3" json:"thermistor_damaged,omitempty"`
	BmbCommError           bool                   `protobuf:"varint,1009,opt,name=bmb_comm_error,json=bmbCommError,proto3" json:"bmb_comm_error,omitempty"`
	ImdGndIsolationError   bool                   `protobuf:"varint,1010,opt,name=imd_gnd_isolation_error,json=imdGndIsolationError,proto3" json:"imd_gnd_isolation_error,omitempty"`
	TractiveContactorError bool                   `protobuf:"varint,1011,opt,name=tractive_contactor_error,json=tractiveContactorError,proto3" json:"tractive_contactor_error,omitempty"`
	PrechargeFail          bool                   `protobuf:"varint,1012,opt,name=precharge_fail,json=prechargeFail,proto3" json:"precharge_fail,omitempty"`
	CellsVBalanced         bool                   `protobuf:"varint,1013,opt,name=cells_v_balanced,json=cellsVBalanced,proto3" json:"cells_v_balanced,omitempty"`
	CellMinV               float32                `protobuf:"fixed32,1014,opt,name=cell_min_v,json=cellMinV,proto3" json:"cell_min_v,omitempty"`
	CellMaxV               float32                `protobuf:"fixed32,1015,opt,name=cell_max_v,json=cellMaxV,proto3" json:"cell_max_v,omitempty"`
	BattV                  float32                `protobuf:"fixed32,1016,opt,name=batt_v,json=battV,proto3" json:"batt_v,omitempty"`
	BattC                  float32                `protobuf:"fixed32,1017,opt,name=batt_c,json=battC,proto3" json:"batt_c,omitempty"`
	HvSoc                  float32                `protobuf:"fixed32,1018,opt,name=hv_soc,json=hvSoc,proto3" json:"hv_soc,omitempty"`
	ShutdownLeg1           bool                   `protobuf:"varint,1019,opt,name=shutdown_leg1,json=shutdownLeg1,proto3" json:"shutdown_leg1,omitempty"`
	ShutdownLeg2           bool                   `protobuf:"varint,1020,opt,name=shutdown_leg2,json=shutdownLeg2,proto3" json:"shutdown_leg2,omitempty"`
	ShutdownLeg3           bool                   `protobuf:"varint,1021,opt,name=shutdown_leg3,json=shutdownLeg3,proto3" json:"shutdown_leg3,omitempty"`
	ShutdownLeg4           bool                   `protobuf:"varint,1022,opt,name=shutdown_leg4,json=shutdownLeg4,proto3" json:"shutdown_leg4,omitempty"`
	ShutdownLeg5           bool                   `protobuf:"varint,1023,opt,name=shutdown_leg5,json=shutdownLeg5,proto3" json:"shutdown_leg5,omitempty"`
	ShutdownLeg6           bool                   `protobuf:"varint,1024,opt,name=shutdown_leg6,json=shutdownLeg6,proto3" json:"shutdown_leg6,omitempty"`
	ShutdownLeg7           bool                   `protobuf:"varint,1025,opt,name=shutdown_leg7,json=shutdownLeg7,proto3" json:"shutdown_leg7,omitempty"`
	ShutdownLeg8           bool                   `protobuf:"varint,1026,opt,name=shutdown_leg8,json=shutdownLeg8,proto3" json:"shutdown_leg8,omitempty"`
	ShutdownLeg9           bool                   `protobuf:"varint,1027,opt,name=shutdown_leg9,json=shutdownLeg9,proto3" json:"shutdown_leg9,omitempty"`
	ShutdownLeg10          bool                   `protobuf:"varint,1028,opt,name=shutdown_leg10,json=shutdownLeg10,proto3" json:"shutdown_leg10,omitempty"`
	ShutdownLeg11          bool                   `protobuf:"varint,1029,opt,name=shutdown_leg11,json=shutdownLeg11,proto3" json:"shutdown_leg11,omitempty"`
	ShutdownLeg12          bool                   `protobuf:"varint,1030,opt,name=shutdown_leg12,json=shutdownLeg12,proto3" json:"shutdown_leg12,omitempty"`
	CellsTemps             []float32              `protobuf:"fixed32,1031,rep,packed,name=cells_temps,json=cellsTemps,proto3" json:"cells_temps,omitempty"`
	CellsV                 []float32              `protobuf:"fixed32,1032,rep,packed,name=cells_v,json=cellsV,proto3" json:"cells_v,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DiagnosticsLow) Reset() {
	*x = DiagnosticsLow{}
	mi := &file_template_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiagnosticsLow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsLow) ProtoMessage() {}

func (x *DiagnosticsLow) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsLow.ProtoReflect.Descriptor instead.
func (*DiagnosticsLow) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{5}
}

func (x *DiagnosticsLow) GetBattOverC() bool {
	if x != nil {
		return x.BattOverC
	}
	return false
}

func (x *DiagnosticsLow) GetCellOverV() int32 {
	if x != nil {
		return x.CellOverV
	}
	return 0
}

func (x *DiagnosticsLow) GetCellUnderV() int32 {
	if x != nil {
		return x.CellUnderV
	}
	return 0
}

func (x *DiagnosticsLow) GetCellOpenWire() int32 {
	if x != nil {
		return x.CellOpenWire
	}
	return 0
}

func (x *DiagnosticsLow) GetCellDamaged() int32 {
	if x != nil {
		return x.CellDamaged
	}
	return 0
}

func (x *DiagnosticsLow) GetThermistorDamaged() int32 {
	if x != nil {
		return x.ThermistorDamaged
	}
	return 0
}

func (x *DiagnosticsLow) GetBmbCommError() bool {
	if x != nil {
		return x.BmbCommError
	}
	return false
}

func (x *DiagnosticsLow) GetImdGndIsolationError() bool {
	if x != nil {
		return x.ImdGndIsolationError
	}
	return false
}

func (x *DiagnosticsLow) GetTractiveContactorError() bool {
	if x != nil {
		return x.TractiveContactorError
	}
	return false
}

func (x *DiagnosticsLow) GetPrechargeFail() bool {
	if x != nil {
		return x.PrechargeFail
	}
	return false
}

func (x *DiagnosticsLow) GetCellsVBalanced() bool {
	if x != nil {
		return x.CellsVBalanced
	}
	return false
}

func (x *DiagnosticsLow) GetCellMinV() float32 {
	if x != nil {
		return x.CellMinV
	}
	return 0
}

func (x *DiagnosticsLow) GetCellMaxV() float32 {
	if x != nil {
		return x.CellMaxV
	}
	return 0
}

func (x *DiagnosticsLow) GetBattV() float32 {
	if x != nil {
		return x.BattV
	}
	return 0
}

func (x *DiagnosticsLow) GetBattC() float32 {
	if x != nil {
		return x.BattC
	}
	return 0
}

func (x *DiagnosticsLow) GetHvSoc() float32 {
	if x != nil {
		return x.HvSoc
	}
	return 0
}

func (x *DiagnosticsLow) GetShutdownLeg1() bool {
	if x != nil {
		return x.ShutdownLeg1
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg2() bool {
	if x != nil {
		return x.ShutdownLeg2
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg3() bool {
	if x != nil {
		return x.ShutdownLeg3
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg4() bool {
	if x != nil {
		return x.ShutdownLeg4
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg5() bool {
	if x != nil {
		return x.ShutdownLeg5
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg6() bool {
	if x != nil {
		return x.ShutdownLeg6
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg7() bool {
	if x != nil {
		return x.ShutdownLeg7
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg8() bool {
	if x != nil {
		return x.ShutdownLeg8
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg9() bool {
	if x != nil {
		return x.ShutdownLeg9
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg10() bool {
	if x != nil {
		return x.ShutdownLeg10
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg11() bool {
	if x != nil {
		return x.ShutdownLeg11
	}
	return false
}

func (x *DiagnosticsLow) GetShutdownLeg12() bool {
	if x != nil {
		return x.ShutdownLeg12
	}
	return false
}

func (x *DiagnosticsLow) GetCellsTemps() []float32 {
	if x != nil {
		return x.CellsTemps
	}
	return nil
}

func (x *DiagnosticsLow) GetCellsV() []float32 {
	if x != nil {
		return x.CellsV
	}
	return nil
}

type Thermal struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	MotorLoopFlowRate     float32                `protobuf:"fixed32,1033,opt,name=motor_loop_flow_rate,json=motorLoopFlowRate,proto3" json:"motor_loop_flow_rate,omitempty"`
	MotorLoopMotorTemp    float32                `protobuf:"fixed32,1034,opt,name=motor_loop_motor_temp,json=motorLoopMotorTemp,proto3" json:"motor_loop_motor_temp,omitempty"`
	MotorLoopInverterTemp float32                `protobuf:"fixed32,1035,opt,name=motor_loop_inverter_temp,json=motorLoopInverterTemp,proto3" json:"motor_loop_inverter_temp,omitempty"`
	MotorLoopRadTemp      float32                `protobuf:"fixed32,1036,opt,name=motor_loop_rad_temp,json=motorLoopRadTemp,proto3" json:"motor_loop_rad_temp,omitempty"`
	MotorLoopRadFanSpeed  float32                `protobuf:"fixed32,1037,opt,name=motor_loop_rad_fan_speed,json=motorLoopRadFanSpeed,proto3" json:"motor_loop_rad_fan_speed,omitempty"`
	AmbientTemp           float32                `protobuf:"fixed32,1038,opt,name=ambient_temp,json=ambientTemp,proto3" json:"ambient_temp,omitempty"`
	BattLoopBattTemp      float32                `protobuf:"fixed32,1039,opt,name=batt_loop_batt_temp,json=battLoopBattTemp,proto3" json:"batt_loop_batt_temp,omitempty"`
	BattLoopRadTemp       float32                `protobuf:"fixed32,1040,opt,name=batt_loop_rad_temp,json=battLoopRadTemp,proto3" json:"batt_loop_rad_temp,omitempty"`
	BattLoopRadFanSpeed   float32                `protobuf:"fixed32,1041,opt,name=batt_loop_rad_fan_speed,json=battLoopRadFanSpeed,proto3" json:"batt_loop_rad_fan_speed,omitempty"`
	MotorTemp             float32                `protobuf:"fixed32,1042,opt,name=motor_temp,json=motorTemp,proto3" json:"motor_temp,omitempty"`
	InverterTemp          float32                `protobuf:"fixed32,1043,opt,name=inverter_temp,json=inverterTemp,proto3" json:"inverter_temp,omitempty"`
	BusBarTemp1           float32                `protobuf:"fixed32,1044,opt,name=bus_bar_temp1,json=busBarTemp1,proto3" json:"bus_bar_temp1,omitempty"`
	BusBarTemp2           float32                `protobuf:"fixed32,1045,opt,name=bus_bar_temp2,json=busBarTemp2,proto3" json:"bus_bar_temp2,omitempty"`
	BusBarTemp3           float32                `protobuf:"fixed32,1046,opt,name=bus_bar_temp3,json=busBarTemp3,proto3" json:"bus_bar_temp3,omitempty"`
	PrechargeRTemp        float32                `protobuf:"fixed32,1047,opt,name=precharge_r_temp,json=prechargeRTemp,proto3" json:"precharge_r_temp,omitempty"`
	DischargeRTemp        float32                `protobuf:"fixed32,1048,opt,name=discharge_r_temp,json=dischargeRTemp,proto3" json:"discharge_r_temp,omitempty"`
	BattOverTemp          bool                   `protobuf:"varint,1049,opt,name=batt_over_temp,json=battOverTemp,proto3" json:"batt_over_temp,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Thermal) Reset() {
	*x = Thermal{}
	mi := &file_template_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Thermal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thermal) ProtoMessage() {}

func (x *Thermal) ProtoReflect() protoreflect.Message {
	mi := &file_template_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thermal.ProtoReflect.Descriptor instead.
func (*Thermal) Descriptor() ([]byte, []int) {
	return file_template_proto_rawDescGZIP(), []int{6}
}

func (x *Thermal) GetMotorLoopFlowRate() float32 {
	if x != nil {
		return x.MotorLoopFlowRate
	}
	return 0
}

func (x *Thermal) GetMotorLoopMotorTemp() float32 {
	if x != nil {
		return x.MotorLoopMotorTemp
	}
	return 0
}

func (x *Thermal) GetMotorLoopInverterTemp() float32 {
	if x != nil {
		return x.MotorLoopInverterTemp
	}
	return 0
}

func (x *Thermal) GetMotorLoopRadTemp() float32 {
	if x != nil {
		return x.MotorLoopRadTemp
	}
	return 0
}

func (x *Thermal) GetMotorLoopRadFanSpeed() float32 {
	if x != nil {
		return x.MotorLoopRadFanSpeed
	}
	return 0
}

func (x *Thermal) GetAmbientTemp() float32 {
	if x != nil {
		return x.AmbientTemp
	}
	return 0
}

func (x *Thermal) GetBattLoopBattTemp() float32 {
	if x != nil {
		return x.BattLoopBattTemp
	}
	return 0
}

func (x *Thermal) GetBattLoopRadTemp() float32 {
	if x != nil {
		return x.BattLoopRadTemp
	}
	return 0
}

func (x *Thermal) GetBattLoopRadFanSpeed() float32 {
	if x != nil {
		return x.BattLoopRadFanSpeed
	}
	return 0
}

func (x *Thermal) GetMotorTemp() float32 {
	if x != nil {
		return x.MotorTemp
	}
	return 0
}

func (x *Thermal) GetInverterTemp() float32 {
	if x != nil {
		return x.InverterTemp
	}
	return 0
}

func (x *Thermal) GetBusBarTemp1() float32 {
	if x != nil {
		return x.BusBarTemp1
	}
	return 0
}

func (x *Thermal) GetBusBarTemp2() float32 {
	if x != nil {
		return x.BusBarTemp2
	}
	return 0
}

func (x *Thermal) GetBusBarTemp3() float32 {
	if x != nil {
		return x.BusBarTemp3
	}
	return 0
}

func (x *Thermal) GetPrechargeRTemp() float32 {
	if x != nil {
		return x.PrechargeRTemp
	}
	return 0
}

func (x *Thermal) GetDischargeRTemp() float32 {
	if x != nil {
		return x.DischargeRTemp
	}
	return 0
}

func (x *Thermal) GetBattOverTemp() bool {
	if x != nil {
		return x.BattOverTemp
	}
	return false
}

var File_template_proto protoreflect.FileDescriptor

const file_template_proto_rawDesc = "" +
	"\n" +
	"\x0etemplate.proto\"\xc3\x02\n" +
	"\n" +
	"SensorData\x12\x12\n" +
	"\x04time\x18\x01 \x01(\x03R\x04time\x12\x1b\n" +
	"\tpacket_id\x18\x02 \x01(\x03R\bpacketId\x12%\n" +
	"\bdynamics\x18\x03 \x01(\v2\t.DynamicsR\bdynamics\x12%\n" +
	"\bcontrols\x18\x04 \x01(\v2\t.ControlsR\bcontrols\x12\x19\n" +
	"\x04pack\x18\x05 \x01(\v2\x05.PackR\x04pack\x12;\n" +
	"\x10diagnostics_high\x18\x06 \x01(\v2\x10.DiagnosticsHighR\x0fdiagnosticsHigh\x129\n" +
	"\x0fdiagnostics_low\x18\xe9\a \x01(\v2\x0f.DiagnosticsLowR\x0ediagnosticsLow\x12#\n" +
	"\athermal\x18\xea\a \x01(\v2\b.ThermalR\athermal\"\xd4\r\n" +
	"\bDynamics\x12&\n" +
	"\x0fsteer_col_angle\x18\a \x01(\x02R\rsteerColAngle\x12$\n" +
	"\x0efl_steer_angle\x18\b \x01(\x02R\fflSteerAngle\x12$\n" +
	"\x0efr_steer_angle\x18\t \x01(\x02R\ffrSteerAngle\x12&\n" +
	"\x0ffl_sprung_accel\x18\n" +
	" \x03(\x02R\rflSprungAccel\x12&\n" +
	"\x0ffr_sprung_accel\x18\v \x03(\x02R\rfrSprungAccel\x12&\n" +
	"\x0fbl_sprung_accel\x18\f \x03(\x02R\rblSprungAccel\x12&\n" +
	"\x0fbr_sprung_accel\x18\r \x03(\x02R\rbrSprungAccel\x12*\n" +
	"\x11fl_unsprung_accel\x18\x0e \x03(\x02R\x0fflUnsprungAccel\x12*\n" +
	"\x11fr_unsprung_accel\x18\x0f \x03(\x02R\x0ffrUnsprungAccel\x12*\n" +
	"\x11bl_unsprung_accel\x18\x10 \x03(\x02R\x0fblUnsprungAccel\x12*\n" +
	"\x11br_unsprung_accel\x18\x11 \x03(\x02R\x0fbrUnsprungAccel\x12+\n" +
	"\x12fl_sprung_ang_rate\x18\x12 \x03(\x02R\x0fflSprungAngRate\x12+\n" +
	"\x12fr_sprung_ang_rate\x18\x13 \x03(\x02R\x0ffrSprungAngRate\x12+\n" +
	"\x12bl_sprung_ang_rate\x18\x14 \x03(\x02R\x0fblSprungAngRate\x12+\n" +
	"\x12br_sprung_ang_rate\x18\x15 \x03(\x02R\x0fbrSprungAngRate\x12&\n" +
	"\x0fcent_mass_accel\x18\x16 \x03(\x02R\rcentMassAccel\x12+\n" +
	"\x12cent_mass_ang_rate\x18\x17 \x03(\x02R\x0fcentMassAngRate\x12\x1b\n" +
	"\tflw_speed\x18\x18 \x01(\x02R\bflwSpeed\x12\x1b\n" +
	"\tfrw_speed\x18\x19 \x01(\x02R\bfrwSpeed\x12\x1b\n" +
	"\tblw_speed\x18\x1a \x01(\x02R\bblwSpeed\x12\x1b\n" +
	"\tbrw_speed\x18\x1b \x01(\x02R\bbrwSpeed\x12$\n" +
	"\x0efl_ride_height\x18\x1c \x01(\x02R\fflRideHeight\x12$\n" +
	"\x0efr_ride_height\x18\x1d \x01(\x02R\ffrRideHeight\x12$\n" +
	"\x0ebl_ride_height\x18\x1e \x01(\x02R\fblRideHeight\x12$\n" +
	"\x0ebr_ride_height\x18\x1f \x01(\x02R\fbrRideHeight\x12)\n" +
	"\x11fl_strain_gauge_v\x18  \x01(\x02R\x0eflStrainGaugeV\x12)\n" +
	"\x11fr_strain_gauge_v\x18! \x01(\x02R\x0efrStrainGaugeV\x12)\n" +
	"\x11bl_strain_gauge_v\x18\" \x01(\x02R\x0eblStrainGaugeV\x12)\n" +
	"\x11br_strain_gauge_v\x18# \x01(\x02R\x0ebrStrainGaugeV\x12*\n" +
	"\x11fl_pushrod_stress\x18$ \x01(\x02R\x0fflPushrodStress\x12*\n" +
	"\x11fr_pushrod_stress\x18% \x01(\x02R\x0ffrPushrodStress\x12*\n" +
	"\x11bl_pushrod_stress\x18& \x01(\x02R\x0fblPushrodStress\x12*\n" +
	"\x11br_pushrod_stress\x18' \x01(\x02R\x0fbrPushrodStress\x12,\n" +
	"\x12fl_spring_displace\x18( \x01(\x02R\x10flSpringDisplace\x12,\n" +
	"\x12fr_spring_displace\x18) \x01(\x02R\x10frSpringDisplace\x12,\n" +
	"\x12bl_spring_displace\x18* \x01(\x02R\x10blSpringDisplace\x12,\n" +
	"\x12br_spring_displace\x18+ \x01(\x02R\x10brSpringDisplace\x12\x1d\n" +
	"\n" +
	"dash_speed\x18, \x01(\x02R\tdashSpeed\x12\x13\n" +
	"\x05f_gps\x18- \x03(\x02R\x04fGps\x12\x13\n" +
	"\x05b_gps\x18. \x03(\x02R\x04bGps\x12$\n" +
	"\x0ef_gps_velocity\x18/ \x01(\x02R\ffGpsVelocity\x12$\n" +
	"\x0eb_gps_velocity\x180 \x01(\x02R\fbGpsVelocity\x12\"\n" +
	"\rf_gps_heading\x181 \x01(\x02R\vfGpsHeading\x12\"\n" +
	"\rb_gps_heading\x182 \x01(\x02R\vbGpsHeading\"\x88\x04\n" +
	"\bControls\x12\x17\n" +
	"\aapps1_v\x183 \x01(\x02R\x06apps1V\x12\x17\n" +
	"\aapps2_v\x184 \x01(\x02R\x06apps2V\x12\x17\n" +
	"\aapps1_t\x185 \x01(\x02R\x06apps1T\x12\x17\n" +
	"\aapps2_t\x186 \x01(\x02R\x06apps2T\x12\"\n" +
	"\raccel_pedal_t\x187 \x01(\x02R\vaccelPedalT\x12\x17\n" +
	"\abpps1_v\x188 \x01(\x02R\x06bpps1V\x12\x17\n" +
	"\abpps2_v\x189 \x01(\x02R\x06bpps2V\x12\x17\n" +
	"\abpps1_t\x18: \x01(\x02R\x06bpps1T\x12\x17\n" +
	"\abpps2_t\x18; \x01(\x02R\x06bpps2T\x12\"\n" +
	"\rbrake_pedal_t\x18< \x01(\x02R\vbrakePedalT\x12\x15\n" +
	"\x06bse1_v\x18= \x01(\x02R\x05bse1V\x12\x15\n" +
	"\x06bse2_v\x18> \x01(\x02R\x05bse2V\x12\x15\n" +
	"\x06bse3_v\x18? \x01(\x02R\x05bse3V\x12(\n" +
	"\x10brake_pressure_f\x18@ \x01(\x02R\x0ebrakePressureF\x12.\n" +
	"\x13brake_pressure_rbll\x18A \x01(\x02R\x11brakePressureRbll\x12.\n" +
	"\x13brake_pressure_rall\x18B \x01(\x02R\x11brakePressureRall\x12\x1d\n" +
	"\n" +
	"brake_bias\x18C \x01(\x02R\tbrakeBias\"\xea\x01\n" +
	"\x04Pack\x12\x1a\n" +
	"\thv_pack_v\x18D \x01(\x02R\ahvPackV\x12\"\n" +
	"\rhv_tractive_v\x18E \x01(\x02R\vhvTractiveV\x12\x11\n" +
	"\x04hv_c\x18F \x01(\x02R\x03hvC\x12\x11\n" +
	"\x04lv_v\x18G \x01(\x02R\x03lvV\x12\x11\n" +
	"\x04lv_c\x18H \x01(\x02R\x03lvC\x12'\n" +
	"\x0fcontactor_state\x18I \x01(\x05R\x0econtactorState\x12\x1c\n" +
	"\n" +
	"avg_cell_v\x18J \x01(\x02R\bavgCellV\x12\"\n" +
	"\ravg_cell_temp\x18K \x01(\x02R\vavgCellTemp\"\xea\x04\n" +
	"\x0fDiagnosticsHigh\x12)\n" +
	"\x10apps1_disconnect\x18L \x01(\bR\x0fapps1Disconnect\x12)\n" +
	"\x10apps2_disconnect\x18M \x01(\bR\x0fapps2Disconnect\x12&\n" +
	"\x0fapps1_out_range\x18N \x01(\bR\rapps1OutRange\x12&\n" +
	"\x0fapps2_out_range\x18O \x01(\bR\rapps2OutRange\x12#\n" +
	"\rapps_mismatch\x18P \x01(\bR\fappsMismatch\x12#\n" +
	"\rapps_implause\x18Q \x01(\bR\fappsImplause\x12)\n" +
	"\x10bpps1_disconnect\x18R \x01(\bR\x0fbpps1Disconnect\x12)\n" +
	"\x10bpps2_disconnect\x18S \x01(\bR\x0fbpps2Disconnect\x12&\n" +
	"\x0fbpps1_out_range\x18T \x01(\bR\rbpps1OutRange\x12&\n" +
	"\x0fbpps2_out_range\x18U \x01(\bR\rbpps2OutRange\x12#\n" +
	"\rbpps_mismatch\x18V \x01(\bR\fbppsMismatch\x12'\n" +
	"\x0fbse1_disconnect\x18W \x01(\bR\x0ebse1Disconnect\x12'\n" +
	"\x0fbse2_disconnect\x18X \x01(\bR\x0ebse2Disconnect\x12$\n" +
	"\x0ebse1_out_range\x18Y \x01(\bR\fbse1OutRange\x12$\n" +
	"\x0ebse2_out_range\x18Z \x01(\bR\fbse2OutRange\"\xed\b\n" +
	"\x0eDiagnosticsLow\x12\x1f\n" +
	"\vbatt_over_c\x18\xeb\a \x01(\bR\tbattOverC\x12\x1f\n" +
	"\vcell_over_v\x18\xec\a \x01(\x05R\tcellOverV\x12!\n" +
	"\fcell_under_v\x18\xed\a \x01(\x05R\n" +
	"cellUnderV\x12%\n" +
	"\x0ecell_open_wire\x18\xee\a \x01(\x05R\fcellOpenWire\x12\"\n" +
	"\fcell_damaged\x18\xef\a \x01(\x05R\vcellDamaged\x12.\n" +
	"\x12thermistor_damaged\x18\xf0\a \x01(\x05R\x11thermistorDamaged\x12%\n" +
	"\x0ebmb_comm_error\x18\xf1\a \x01(\bR\fbmbCommError\x126\n" +
	"\x17imd_gnd_isolation_error\x18\xf2\a \x01(\bR\x14imdGndIsolationError\x129\n" +
	"\x18tractive_contactor_error\x18\xf3\a \x01(\bR\x16tractiveContactorError\x12&\n" +
	"\x0eprecharge_fail\x18\xf4\a \x01(\bR\rprechargeFail\x12)\n" +
	"\x10cells_v_balanced\x18\xf5\a \x01(\bR\x0ecellsVBalanced\x12\x1d\n" +
	"\n" +
	"cell_min_v\x18\xf6\a \x01(\x02R\bcellMinV\x12\x1d\n" +
	"\n" +
	"cell_max_v\x18\xf7\a \x01(\x02R\bcellMaxV\x12\x16\n" +
	"\x06batt_v\x18\xf8\a \x01(\x02R\x05battV\x12\x16\n" +
	"\x06batt_c\x18\xf9\a \x01(\x02R\x05battC\x12\x16\n" +
	"\x06hv_soc\x18\xfa\a \x01(\x02R\x05hvSoc\x12$\n" +
	"\rshutdown_leg1\x18\xfb\a \x01(\bR\fshutdownLeg1\x12$\n" +
	"\rshutdown_leg2\x18\xfc\a \x01(\bR\fshutdownLeg2\x12$\n" +
	"\rshutdown_leg3\x18\xfd\a \x01(\bR\fshutdownLeg3\x12$\n" +
	"\rshutdown_leg4\x18\xfe\a \x01(\bR\fshutdownLeg4\x12$\n" +
	"\rshutdown_leg5\x18\xff\a \x01(\bR\fshutdownLeg5\x12$\n" +
	"\rshutdown_leg6\x18\x80\b \x01(\bR\fshutdownLeg6\x12$\n" +
	"\rshutdown_leg7\x18\x81\b \x01(\bR\fshutdownLeg7\x12$\n" +
	"\rshutdown_leg8\x18\x82\b \x01(\bR\fshutdownLeg8\x12$\n" +
	"\rshutdown_leg9\x18\x83\b \x01(\bR\fshutdownLeg9\x12&\n" +
	"\x0eshutdown_leg10\x18\x84\b \x01(\bR\rshutdownLeg10\x12&\n" +
	"\x0eshutdown_leg11\x18\x85\b \x01(\bR\rshutdownLeg11\x12&\n" +
	"\x0eshutdown_leg12\x18\x86\b \x01(\bR\rshutdownLeg12\x12 \n" +
	"\vcells_temps\x18\x87\b \x03(\x02R\n" +
	"cellsTemps\x12\x18\n" +
	"\acells_v\x18\x88\b \x03(\x02R\x06cellsV\"\xfd\x05\n" +
	"\aThermal\x120\n" +
	"\x14motor_loop_flow_rate\x18\x89\b \x01(\x02R\x11motorLoopFlowRate\x122\n" +
	"\x15motor_loop_motor_temp\x18\x8a\b \x01(\x02R\x12motorLoopMotorTemp\x128\n" +
	"\x18motor_loop_inverter_temp\x18\x8b\b \x01(\x02R\x15motorLoopInverterTemp\x12.\n" +
	"\x13motor_loop_rad_temp\x18\x8c\b \x01(\x02R\x10motorLoopRadTemp\x127\n" +
	"\x18motor_loop_rad_fan_speed\x18\x8d\b \x01(\x02R\x14motorLoopRadFanSpeed\x12\"\n" +
	"\fambient_temp\x18\x8e\b \x01(\x02R\vambientTemp\x12.\n" +
	"\x13batt_loop_batt_temp\x18\x8f\b \x01(\x02R\x10battLoopBattTemp\x12,\n" +
	"\x12batt_loop_rad_temp\x18\x90\b \x01(\x02R\x0fbattLoopRadTemp\x125\n" +
	"\x17batt_loop_rad_fan_speed\x18\x91\b \x01(\x02R\x13battLoopRadFanSpeed\x12\x1e\n" +
	"\n" +
	"motor_temp\x18\x92\b \x01(\x02R\tmotorTemp\x12$\n" +
	"\rinverter_temp\x18\x93\b \x01(\x02R\finverterTemp\x12#\n" +
	"\rbus_bar_temp1\x18\x94\b \x01(\x02R\vbusBarTemp1\x12#\n" +
	"\rbus_bar_temp2\x18\x95\b \x01(\x02R\vbusBarTemp2\x12#\n" +
	"\rbus_bar_temp3\x18\x96\b \x01(\x02R\vbusBarTemp3\x12)\n" +
	"\x10precharge_r_temp\x18\x97\b \x01(\x02R\x0eprechargeRTemp\x12)\n" +
	"\x10discharge_r_temp\x18\x98\b \x01(\x02R\x0edischargeRTemp\x12%\n" +
	"\x0ebatt_over_temp\x18\x99\b \x01(\bR\fbattOverTempB\x14Z\x12src/proto;templateb\x06proto3"

var (
	file_template_proto_rawDescOnce sync.Once
	file_template_proto_rawDescData []byte
)

func file_template_proto_rawDescGZIP() []byte {
	file_template_proto_rawDescOnce.Do(func() {
		file_template_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_template_proto_rawDesc), len(file_template_proto_rawDesc)))
	})
	return file_template_proto_rawDescData
}

var file_template_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_template_proto_goTypes = []any{
	(*SensorData)(nil),      // 0: SensorData
	(*Dynamics)(nil),        // 1: Dynamics
	(*Controls)(nil),        // 2: Controls
	(*Pack)(nil),            // 3: Pack
	(*DiagnosticsHigh)(nil), // 4: DiagnosticsHigh
	(*DiagnosticsLow)(nil),  // 5: DiagnosticsLow
	(*Thermal)(nil),         // 6: Thermal
}
var file_template_proto_depIdxs = []int32{
	1, // 0: SensorData.dynamics:type_name -> Dynamics
	2, // 1: SensorData.controls:type_name -> Controls
	3, // 2: SensorData.pack:type_name -> Pack
	4, // 3: SensorData.diagnostics_high:type_name -> DiagnosticsHigh
	5, // 4: SensorData.diagnostics_low:type_name -> DiagnosticsLow
	6, // 5: SensorData.thermal:type_name -> Thermal
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_template_proto_init() }
func file_template_proto_init() {
	if File_template_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_template_proto_rawDesc), len(file_template_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_template_proto_goTypes,
		DependencyIndexes: file_template_proto_depIdxs,
		MessageInfos:      file_template_proto_msgTypes,
	}.Build()
	File_template_proto = out.File
	file_template_proto_goTypes = nil
	file_template_proto_depIdxs = nil
}
